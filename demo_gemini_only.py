#!/usr/bin/env python3
"""
Demo do AI Video GPT usando apenas a API do Gemini

Este script demonstra como o projeto funciona usando apenas o Gemini,
sem necessidade da API do OpenAI para funcionalidades b√°sicas.
"""

import os
import sys
from dotenv import load_dotenv

# Add src directory to Python path
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

def check_gemini_only():
    """Verifica se o Gemini est√° configurado"""
    load_dotenv()
    
    print("üîç Verificando configura√ß√£o do Gemini...")
    
    gemini_key = os.getenv("GEMINI_API_KEY")
    
    if not gemini_key or gemini_key == "your_gemini_api_key_here":
        print("‚ùå GEMINI_API_KEY n√£o configurada no arquivo .env")
        print("\nüìã Para configurar:")
        print("1. Acesse: https://makersuite.google.com/app/apikey")
        print("2. Crie uma conta Google (se necess√°rio)")
        print("3. Gere uma nova chave de API")
        print("4. Edite o arquivo .env e substitua 'your_gemini_api_key_here' pela sua chave")
        return False
        
    print("‚úÖ GEMINI_API_KEY configurada")
    
    # Verificar depend√™ncias b√°sicas
    try:
        import google.generativeai
        print("‚úÖ google-generativeai instalado")
    except ImportError:
        print("‚ùå google-generativeai n√£o instalado")
        print("   Execute: pip install google-generativeai")
        return False
    
    return True

def test_script_generation():
    """Testa apenas a gera√ß√£o de roteiro com Gemini"""
    if not check_gemini_only():
        return
    
    print("\nüé¨ Testando gera√ß√£o de roteiro...")
    
    try:
        from scriptgen import generate_script
        
        theme = "Uma aventura espacial"
        print(f"Tema: {theme}")
        
        script_data = generate_script(theme)
        
        if script_data:
            print("\n‚úÖ Roteiro gerado com sucesso!")
            print(f"T√≠tulo: {script_data.get('title', 'N/A')}")
            print(f"N√∫mero de cenas: {len(script_data.get('scenes', []))}")
            
            # Mostrar primeira cena como exemplo
            if script_data.get('scenes'):
                first_scene = script_data['scenes'][0]
                print(f"\nPrimeira cena:")
                print(f"  Descri√ß√£o visual: {first_scene.get('visual_description', 'N/A')[:100]}...")
                print(f"  Narra√ß√£o: {first_scene.get('narration', 'N/A')[:100]}...")
        else:
            print("‚ùå Falha na gera√ß√£o do roteiro")
            
    except Exception as e:
        print(f"‚ùå Erro: {e}")
        print("\nVerifique se:")
        print("- A chave do Gemini est√° correta")
        print("- Voc√™ tem acesso √† API do Gemini")
        print("- Sua conex√£o com a internet est√° funcionando")

def show_project_status():
    """Mostra o status atual do projeto"""
    print("\nüìä Status do Projeto AI Video GPT")
    print("=" * 40)
    
    # Verificar arquivos principais
    files_to_check = [
        "main.py",
        "src/scriptgen.py",
        "src/imagegen.py", 
        "src/voice.py",
        "src/assemble.py",
        ".env",
        "requirements.txt"
    ]
    
    for file_path in files_to_check:
        if os.path.exists(file_path):
            print(f"‚úÖ {file_path}")
        else:
            print(f"‚ùå {file_path}")
    
    print("\nüîß Funcionalidades:")
    print("‚úÖ Gera√ß√£o de roteiro (Gemini)")
    print("‚ö†Ô∏è  Gera√ß√£o de imagens (requer configura√ß√£o adicional)")
    print("‚úÖ Gera√ß√£o de voz (gTTS - gratuito)")
    print("‚úÖ Montagem de v√≠deo (MoviePy)")
    print("‚ö†Ô∏è  Upload autom√°tico (requer OpenAI para algumas fun√ß√µes)")
    
    print("\nüìã Pr√≥ximos passos:")
    print("1. Configure GEMINI_API_KEY no arquivo .env")
    print("2. Execute: python demo_gemini_only.py")
    print("3. Para funcionalidade completa, configure tamb√©m OPENAI_API_KEY")

if __name__ == "__main__":
    print("ü§ñ AI Video GPT - Demo Gemini")
    print("=" * 35)
    
    if not os.path.exists(".env"):
        print("‚ùå Arquivo .env n√£o encontrado!")
        exit(1)
    
    show_project_status()
    
    print("\n" + "=" * 35)
    test_script_generation()